-- =============================================
-- BASE DE DATOS PARA GYM APP - VERSIÓN SIMPLIFICADA
-- Con sistema de alimentos simplificado y QR de asistencia
-- =============================================

CREATE DATABASE IF NOT EXISTS gym;
USE gym;

-- =============================================
-- TABLA PRINCIPAL DE USUARIOS
-- =============================================

CREATE TABLE IF NOT EXISTS usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    telefono VARCHAR(20),
    tipo ENUM('cliente', 'entrenador', 'admin') DEFAULT 'cliente',
    activo BOOLEAN DEFAULT TRUE,
    puede_acceder BOOLEAN DEFAULT TRUE,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_nacimiento DATE,
    genero ENUM('masculino', 'femenino', 'otro'),
    objetivo ENUM('bajar_peso', 'subir_masa', 'mantener', 'definir') DEFAULT 'mantener',
    notas TEXT,
    -- QR único para cada usuario
    qr_code VARCHAR(100) UNIQUE NOT NULL,
    racha_actual INT DEFAULT 0,
    racha_maxima INT DEFAULT 0,
    INDEX idx_acceso (activo, puede_acceder),
    INDEX idx_tipo_activo (tipo, activo),
    INDEX idx_qr_code (qr_code)
);

-- =============================================
-- CONFIGURACIÓN QR DEL GIMNASIO
-- =============================================

CREATE TABLE IF NOT EXISTS configuracion_qr (
    id INT AUTO_INCREMENT PRIMARY KEY,
    qr_gimnasio VARCHAR(100) UNIQUE NOT NULL,
    nombre_gym VARCHAR(100) NOT NULL,
    activo BOOLEAN DEFAULT TRUE,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- =============================================
-- REGISTRO DE ASISTENCIAS
-- =============================================

CREATE TABLE IF NOT EXISTS asistencias (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    fecha DATE NOT NULL,
    hora_entrada TIME NOT NULL,
    hora_salida TIME NULL,
    metodo_registro ENUM('qr_personal', 'qr_gimnasio', 'admin_manual') NOT NULL,
    registrado_por INT NULL, -- ID del admin que registró manualmente
    duracion_minutos INT NULL,
    notas TEXT,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (registrado_por) REFERENCES usuarios(id) ON DELETE SET NULL,
    UNIQUE KEY unique_usuario_fecha (id_usuario, fecha),
    INDEX idx_usuario_fecha (id_usuario, fecha),
    INDEX idx_fecha (fecha),
    INDEX idx_metodo (metodo_registro)
);

-- =============================================
-- HISTORIAL DE ACCIONES ADMINISTRATIVAS
-- =============================================

CREATE TABLE IF NOT EXISTS historial_acceso (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    id_administrador INT NOT NULL,
    accion ENUM('activar', 'desactivar', 'bloquear_acceso', 'eliminar', 'registro_asistencia') NOT NULL,
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    detalles TEXT,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (id_administrador) REFERENCES usuarios(id),
    INDEX idx_usuario_fecha (id_usuario, fecha),
    INDEX idx_accion (accion)
);

-- =============================================
-- MEDIDAS CORPORALES
-- =============================================

CREATE TABLE IF NOT EXISTS medidas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    peso DECIMAL(5,2),
    altura DECIMAL(5,2),
    grasa_corporal DECIMAL(4,1),
    masa_muscular DECIMAL(5,2),
    cintura DECIMAL(5,2),
    cadera DECIMAL(5,2),
    pecho DECIMAL(5,2),
    brazo_derecho DECIMAL(5,2),
    brazo_izquierdo DECIMAL(5,2),
    pierna_derecha DECIMAL(5,2),
    pierna_izquierda DECIMAL(5,2),
    cuello DECIMAL(5,2),
    fecha_medicion DATE NOT NULL,
    notas TEXT,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    INDEX idx_usuario_fecha (id_usuario, fecha_medicion)
);

-- =============================================
-- TABLA DE RACHAS
-- =============================================

CREATE TABLE IF NOT EXISTS rachas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    fecha DATE NOT NULL,
    activa BOOLEAN DEFAULT TRUE,
    tipo_actividad ENUM('gym', 'rutina_casa', 'cardio') DEFAULT 'gym',
    consecutiva BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    UNIQUE KEY unique_user_date (id_usuario, fecha),
    INDEX idx_usuario_activa (id_usuario, activa),
    INDEX idx_usuario_consecutiva (id_usuario, consecutiva)
);

-- =============================================
-- GRUPOS ALIMENTICIOS - SIMPLIFICADO
-- =============================================

CREATE TABLE IF NOT EXISTS grupos_alimentos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50) UNIQUE NOT NULL,
    descripcion TEXT,
    color VARCHAR(7) DEFAULT '#007bff', -- Color hexadecimal para UI
    activo BOOLEAN DEFAULT TRUE,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_activo (activo)
);

-- =============================================
-- BASE DE DATOS DE ALIMENTOS - SIMPLIFICADA
-- =============================================

CREATE TABLE IF NOT EXISTS alimentos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(200) NOT NULL,
    marca VARCHAR(100) NULL,
    id_grupo INT NOT NULL,
    -- Macros por 100g o 100ml
    calorias_100 DECIMAL(7,2) NOT NULL,
    proteinas_100 DECIMAL(6,2) DEFAULT 0,
    carbohidratos_100 DECIMAL(6,2) DEFAULT 0,
    grasas_100 DECIMAL(6,2) DEFAULT 0,
    fibra_100 DECIMAL(6,2) DEFAULT 0,
    -- Tipo de medida base
    tipo_medida ENUM('gramos', 'mililitros') DEFAULT 'gramos',
    -- Control y estadísticas
    activo BOOLEAN DEFAULT TRUE,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    creado_por INT NULL,
    FOREIGN KEY (id_grupo) REFERENCES grupos_alimentos(id),
    FOREIGN KEY (creado_por) REFERENCES usuarios(id) ON DELETE SET NULL,
    INDEX idx_nombre (nombre),
    INDEX idx_grupo (id_grupo),
    INDEX idx_activo (activo),
    INDEX idx_busqueda (nombre, marca)
);

-- =============================================
-- ALIMENTOS MÁS CONSUMIDOS POR USUARIO
-- =============================================

CREATE TABLE IF NOT EXISTS usuario_alimentos_frecuentes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    id_alimento INT NOT NULL,
    veces_consumido INT DEFAULT 1,
    ultima_vez DATE,
    fecha_primer_consumo TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (id_alimento) REFERENCES alimentos(id) ON DELETE CASCADE,
    UNIQUE KEY unique_usuario_alimento (id_usuario, id_alimento),
    INDEX idx_usuario_frecuencia (id_usuario, veces_consumido DESC),
    INDEX idx_usuario_reciente (id_usuario, ultima_vez DESC)
);

-- =============================================
-- EJERCICIOS PREESTABLECIDOS
-- =============================================

CREATE TABLE IF NOT EXISTS ejercicios_preestablecidos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    grupo_muscular ENUM('pecho', 'espalda', 'piernas', 'brazos', 'hombros', 'core', 'cardio', 'fullbody') NOT NULL,
    series INT NOT NULL,
    repeticiones VARCHAR(50) NOT NULL,
    tiempo_descanso VARCHAR(20) NOT NULL,
    instrucciones TEXT,
    imagen_url VARCHAR(255),
    dificultad ENUM('principiante', 'intermedio', 'avanzado') DEFAULT 'intermedio',
    equipamiento_necesario VARCHAR(100),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    creado_por INT,
    FOREIGN KEY (creado_por) REFERENCES usuarios(id) ON DELETE SET NULL,
    INDEX idx_grupo_muscular (grupo_muscular),
    INDEX idx_dificultad (dificultad)
);

-- =============================================
-- RUTINAS DE ENTRENAMIENTO
-- =============================================

CREATE TABLE IF NOT EXISTS rutinas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_entrenador INT NOT NULL,
    titulo VARCHAR(200) NOT NULL,
    descripcion TEXT,
    categoria ENUM('principiante', 'intermedio', 'avanzado', 'cardio', 'fuerza', 'hiit') DEFAULT 'intermedio',
    objetivo ENUM('bajar_peso', 'subir_masa', 'mantener', 'definir', 'general') DEFAULT 'general',
    duracion_minutos INT DEFAULT 45,
    ejercicios JSON,
    activa BOOLEAN DEFAULT TRUE,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_entrenador) REFERENCES usuarios(id) ON DELETE CASCADE,
    INDEX idx_categoria_objetivo (categoria, objetivo),
    INDEX idx_activa (activa)
);

-- =============================================
-- ASIGNACIÓN DE RUTINAS A USUARIOS
-- =============================================

CREATE TABLE IF NOT EXISTS usuario_rutinas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    id_rutina INT NOT NULL,
    fecha_asignacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    activa BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (id_rutina) REFERENCES rutinas(id) ON DELETE CASCADE,
    UNIQUE KEY unique_usuario_rutina (id_usuario, id_rutina),
    INDEX idx_usuario_activa (id_usuario, activa)
);

-- =============================================
-- TIPS Y CONSEJOS
-- =============================================

CREATE TABLE IF NOT EXISTS tips (
    id INT AUTO_INCREMENT PRIMARY KEY,
    titulo VARCHAR(200) NOT NULL,
    contenido TEXT NOT NULL,
    categoria ENUM('nutricion', 'ejercicio', 'mentalidad', 'recovery', 'general') DEFAULT 'general',
    id_autor INT,
    activo BOOLEAN DEFAULT TRUE,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_autor) REFERENCES usuarios(id) ON DELETE SET NULL,
    INDEX idx_categoria_activo (categoria, activo)
);

-- =============================================
-- REGISTRO DE COMIDAS - SIMPLIFICADO
-- =============================================

CREATE TABLE IF NOT EXISTS registro_comidas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    id_alimento INT NOT NULL,
    fecha DATE NOT NULL,
    comida ENUM('desayuno', 'almuerzo', 'cena', 'snack1', 'snack2') NOT NULL,
    cantidad DECIMAL(8,2) NOT NULL, -- Cantidad en gramos o ml
    -- Los cálculos se harán en el frontend con JS
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (id_alimento) REFERENCES alimentos(id) ON DELETE CASCADE,
    INDEX idx_usuario_fecha (id_usuario, fecha),
    INDEX idx_alimento (id_alimento)
);

-- =============================================
-- OBJETIVOS NUTRICIONALES
-- =============================================

CREATE TABLE IF NOT EXISTS objetivos_nutricionales (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    calorias_objetivo DECIMAL(7,2) NOT NULL,
    proteinas_objetivo DECIMAL(6,2) NOT NULL,
    carbohidratos_objetivo DECIMAL(6,2) NOT NULL,
    grasas_objetivo DECIMAL(6,2) NOT NULL,
    agua_objetivo DECIMAL(5,2) DEFAULT 2.5,
    fecha_inicio DATE NOT NULL,
    activo BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    INDEX idx_usuario_activo (id_usuario, activo)
);

-- =============================================
-- ESTADÍSTICAS DEL GIMNASIO
-- =============================================

CREATE TABLE IF NOT EXISTS estadisticas_gym (
    id INT AUTO_INCREMENT PRIMARY KEY,
    fecha DATE NOT NULL,
    total_asistencias INT DEFAULT 0,
    nuevos_registros INT DEFAULT 0,
    rutinas_completadas INT DEFAULT 0,
    usuarios_activos INT DEFAULT 0,
    comidas_registradas INT DEFAULT 0,
    asistencias_qr_personal INT DEFAULT 0,
    asistencias_qr_gimnasio INT DEFAULT 0,
    asistencias_admin INT DEFAULT 0,
    UNIQUE KEY unique_fecha (fecha),
    INDEX idx_fecha (fecha)
);

-- =============================================
-- ESTADÍSTICAS DE USUARIOS MÁS ACTIVOS
-- =============================================

CREATE TABLE IF NOT EXISTS ranking_asistencias (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    mes INT NOT NULL,
    año INT NOT NULL,
    total_asistencias INT DEFAULT 0,
    racha_maxima_mes INT DEFAULT 0,
    posicion_ranking INT DEFAULT 0,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    UNIQUE KEY unique_usuario_mes_año (id_usuario, mes, año),
    INDEX idx_mes_año (mes, año),
    INDEX idx_ranking (posicion_ranking)
);

-- =============================================
-- PROCEDIMIENTOS ALMACENADOS BÁSICOS
-- =============================================

-- Procedimiento para registrar asistencia y actualizar racha
DELIMITER //
CREATE PROCEDURE RegistrarAsistencia(
    IN p_id_usuario INT,
    IN p_metodo ENUM('qr_personal', 'qr_gimnasio', 'admin_manual'),
    IN p_registrado_por INT
)
BEGIN
    DECLARE v_fecha_hoy DATE DEFAULT CURDATE();
    DECLARE v_hora_actual TIME DEFAULT CURTIME();
    DECLARE v_ultima_asistencia DATE;
    DECLARE v_racha_actual INT;
    DECLARE v_racha_maxima INT;
    DECLARE v_nueva_racha INT;
    
    -- Verificar si ya existe asistencia hoy
    IF EXISTS (SELECT 1 FROM asistencias WHERE id_usuario = p_id_usuario AND fecha = v_fecha_hoy) THEN
        SELECT 'ERROR: Ya existe asistencia registrada para hoy' as resultado;
    ELSE
        -- Insertar asistencia
        INSERT INTO asistencias (id_usuario, fecha, hora_entrada, metodo_registro, registrado_por)
        VALUES (p_id_usuario, v_fecha_hoy, v_hora_actual, p_metodo, p_registrado_por);
        
        -- Obtener datos actuales del usuario
        SELECT racha_actual, racha_maxima 
        INTO v_racha_actual, v_racha_maxima
        FROM usuarios WHERE id = p_id_usuario;
        
        -- Obtener última asistencia
        SELECT MAX(fecha) INTO v_ultima_asistencia 
        FROM asistencias 
        WHERE id_usuario = p_id_usuario AND fecha < v_fecha_hoy;
        
        -- Calcular nueva racha
        IF v_ultima_asistencia IS NULL OR DATEDIFF(v_fecha_hoy, v_ultima_asistencia) = 1 THEN
            SET v_nueva_racha = v_racha_actual + 1;
        ELSEIF DATEDIFF(v_fecha_hoy, v_ultima_asistencia) > 1 THEN
            SET v_nueva_racha = 1; -- Reiniciar racha
        ELSE
            SET v_nueva_racha = v_racha_actual;
        END IF;
        
        -- Actualizar racha en usuarios
        UPDATE usuarios 
        SET racha_actual = v_nueva_racha,
            racha_maxima = GREATEST(v_racha_maxima, v_nueva_racha)
        WHERE id = p_id_usuario;
        
        -- Insertar en rachas
        INSERT INTO rachas (id_usuario, fecha, activa, consecutiva)
        VALUES (p_id_usuario, v_fecha_hoy, TRUE, TRUE);
        
        SELECT 'SUCCESS: Asistencia registrada correctamente' as resultado, v_nueva_racha as nueva_racha;
    END IF;
END//
DELIMITER ;

-- =============================================
-- TRIGGERS BÁSICOS
-- =============================================

-- Trigger para generar QR único al crear usuario
DELIMITER //
CREATE TRIGGER generar_qr_usuario
BEFORE INSERT ON usuarios
FOR EACH ROW
BEGIN
    IF NEW.qr_code IS NULL OR NEW.qr_code = '' THEN
        SET NEW.qr_code = CONCAT('USER_', NEW.email, '_', UNIX_TIMESTAMP());
    END IF;
END//
DELIMITER ;

-- Trigger para actualizar estadísticas de alimentos consumidos
DELIMITER //
CREATE TRIGGER actualizar_alimento_frecuente
AFTER INSERT ON registro_comidas
FOR EACH ROW
BEGIN
    INSERT INTO usuario_alimentos_frecuentes (id_usuario, id_alimento, veces_consumido, ultima_vez)
    VALUES (NEW.id_usuario, NEW.id_alimento, 1, NEW.fecha)
    ON DUPLICATE KEY UPDATE 
        veces_consumido = veces_consumido + 1,
        ultima_vez = NEW.fecha;
END//
DELIMITER ;

-- =============================================
-- DATOS INICIALES
-- =============================================

-- Generar QR único para gimnasio
INSERT INTO configuracion_qr (qr_gimnasio, nombre_gym, activo) VALUES 
(CONCAT('GYM_QR_', UNIX_TIMESTAMP()), 'Mi Gimnasio', TRUE);

-- Insertar usuario admin con QR
INSERT INTO usuarios (email, password, nombre, apellido, tipo, qr_code) VALUES 
('admin@gym.com', '$2y$10$ejemplo_hash_password', 'Admin', 'Gym', 'admin', CONCAT('ADMIN_QR_', UNIX_TIMESTAMP()));

-- Insertar grupos de alimentos
INSERT INTO grupos_alimentos (nombre, descripcion, color) VALUES 
('Frutas', 'Frutas frescas y naturales', '#28a745'),
('Verduras', 'Vegetales y hortalizas', '#28a745'),
('Proteínas', 'Carnes, pescados, huevos y lácteos', '#dc3545'),
('Cereales', 'Granos, cereales y tubérculos', '#ffc107'),
('Legumbres', 'Frijoles, lentejas y garbanzos', '#6f42c1'),
('Lácteos', 'Productos lácteos', '#e83e8c'),
('Grasas', 'Aceites, frutos secos y semillas', '#fd7e14'),
('Bebidas', 'Líquidos y bebidas', '#17a2b8'),
('Procesados', 'Alimentos procesados', '#6c757d'),
('Dulces', 'Azúcares y dulces', '#20c997');

-- Insertar alimentos básicos (ejemplos)
INSERT INTO alimentos (nombre, marca, id_grupo, calorias_100, proteinas_100, carbohidratos_100, grasas_100, fibra_100, tipo_medida) VALUES 
('Pechuga de pollo', NULL, 3, 165, 31, 0, 3.6, 0, 'gramos'),
('Arroz blanco cocido', NULL, 4, 130, 2.7, 28, 0.3, 0.4, 'gramos'),
('Plátano', NULL, 1, 89, 1.1, 23, 0.3, 2.6, 'gramos'),
('Huevo entero', NULL, 3, 155, 13, 1.1, 11, 0, 'gramos'),
('Avena', NULL, 4, 389, 16.9, 66, 6.9, 10.6, 'gramos'),
('Leche entera', NULL, 6, 61, 3.2, 4.8, 3.2, 0, 'mililitros'),
('Manzana', NULL, 1, 52, 0.3, 14, 0.2, 2.4, 'gramos'),
('Salmón', NULL, 3, 208, 20, 0, 12, 0, 'gramos'),
('Brócoli', NULL, 2, 34, 2.8, 7, 0.4, 2.6, 'gramos'),
('Almendras', NULL, 7, 579, 21, 22, 50, 12, 'gramos'),
('Yogurt griego', NULL, 6, 59, 10, 3.6, 0.4, 0, 'gramos'),
('Pasta cocida', NULL, 4, 131, 5, 25, 1.1, 1.8, 'gramos'),
('Atún en agua', NULL, 3, 116, 25, 0, 0.8, 0, 'gramos'),
('Pan integral', NULL, 4, 247, 13, 41, 4.2, 7, 'gramos'),
('Frijoles negros', NULL, 5, 132, 8.9, 23, 0.5, 8.7, 'gramos'),
('Agua', NULL, 8, 0, 0, 0, 0, 0, 'mililitros'),
('Aceite de oliva', NULL, 7, 884, 0, 0, 100, 0, 'mililitros'),
('Espinacas', NULL, 2, 23, 2.9, 3.6, 0.4, 2.2, 'gramos'),
('Quinoa cocida', NULL, 4, 120, 4.4, 22, 1.9, 2.8, 'gramos'),
('Pavo', NULL, 3, 189, 29, 0, 7.4, 0, 'gramos');

-- Insertar tips básicos
INSERT INTO tips (titulo, contenido, categoria, id_autor) VALUES 
('Hidratación esencial', 'Toma al menos 8 vasos de agua al día. Tu rendimiento mejora significativamente con buena hidratación.', 'general', 1),
('Proteína post-entreno', 'Consume proteína dentro de los 30 minutos después de entrenar para máxima recuperación muscular.', 'nutricion', 1),
('Descanso entre series', 'Para fuerza: 2-3 min. Para hipertrofia: 1-2 min. Para resistencia: 30-60 seg.', 'ejercicio', 1),
('Mentalidad positiva', 'Cada día en el gym es una victoria. No importa qué tan pequeño sea el progreso.', 'mentalidad', 1),
('Importancia del sueño', 'Dormir 7-8 horas es crucial para la recuperación muscular y el rendimiento óptimo.', 'recovery', 1);

-- Insertar ejercicios básicos
INSERT INTO ejercicios_preestablecidos (nombre, grupo_muscular, series, repeticiones, tiempo_descanso, instrucciones, dificultad, equipamiento_necesario) VALUES
('Press de banca', 'pecho', 3, '8-12', '2-3 min', 'Mantén los pies firmes en el suelo, baja la barra hasta el pecho controladamente.', 'intermedio', 'Banca, barra, discos'),
('Sentadillas', 'piernas', 3, '12-15', '2-3 min', 'Baja hasta que los muslos estén paralelos al suelo, mantén la espalda recta.', 'principiante', 'Ninguno/Barra'),
('Dominadas', 'espalda', 3, '6-10', '2-3 min', 'Cuelga con los brazos extendidos, sube hasta que la barbilla pase la barra.', 'avanzado', 'Barra de dominadas'),
('Plancha', 'core', 3, '30-60 seg', '1-2 min', 'Mantén el cuerpo recto como una tabla, contrae el abdomen.', 'principiante', 'Ninguno'),
('Burpees', 'fullbody', 3, '8-12', '1-2 min', 'Combinación de sentadilla, plancha, flexión y salto.', 'avanzado', 'Ninguno');

-- Insertar estadísticas iniciales
INSERT INTO estadisticas_gym (fecha, total_asistencias, nuevos_registros, usuarios_activos) VALUES 
(CURDATE(), 0, 1, 1);

-- =============================================
-- MENSAJE DE FINALIZACIÓN
-- =============================================

SELECT 'Base de datos simplificada creada exitosamente' as mensaje,
       'Estructura optimizada para:' as optimizada_para,
       '✓ Alimentos con grupos y macros por 100g/ml' as feature1,
       '✓ Persistencia de alimentos más consumidos por usuario' as feature2,
       '✓ Cálculos de macros manejados en frontend (JS/PHP)' as feature3,
       '✓ Estructura simple y eficiente' as feature4,
       '✓ Fácil mantenimiento y escalabilidad' as feature5;