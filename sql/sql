-- Base de datos para Gym App con Sistema de Códigos de Planes
CREATE DATABASE IF NOT EXISTS gym_app;
USE gym_app;

-- Tabla de usuarios (sin cambios)
CREATE TABLE IF NOT EXISTS usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    telefono VARCHAR(20),
    tipo ENUM('cliente', 'entrenador', 'admin') DEFAULT 'cliente',
    activo BOOLEAN DEFAULT TRUE,
    puede_acceder BOOLEAN DEFAULT TRUE,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_nacimiento DATE,
    genero ENUM('masculino', 'femenino', 'otro'),
    objetivo ENUM('bajar_peso', 'subir_masa', 'mantener', 'definir') DEFAULT 'mantener',
    notas TEXT,
    INDEX idx_acceso (activo, puede_acceder)
);

-- Tabla de historial de acceso (sin cambios)
CREATE TABLE IF NOT EXISTS historial_acceso (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    id_administrador INT NOT NULL,
    accion ENUM('activar', 'desactivar', 'bloquear_acceso', 'eliminar') NOT NULL,
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    detalles TEXT,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (id_administrador) REFERENCES usuarios(id)
);

-- NUEVA TABLA: Códigos de planes
CREATE TABLE IF NOT EXISTS codigos_planes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    codigo VARCHAR(20) UNIQUE NOT NULL,
    tipo_plan ENUM('semanal', 'mensual') NOT NULL,
    usado BOOLEAN DEFAULT FALSE,
    fecha_creacion DATETIME DEFAULT CURRENT_TIMESTAMP,
    fecha_uso DATETIME NULL,
    usado_por INT NULL,
    creado_por INT NOT NULL,
    notas TEXT,
    FOREIGN KEY (usado_por) REFERENCES usuarios(id) ON DELETE SET NULL,
    FOREIGN KEY (creado_por) REFERENCES usuarios(id) ON DELETE CASCADE,
    INDEX idx_codigo (codigo),
    INDEX idx_tipo_usado (tipo_plan, usado),
    INDEX idx_fecha_creacion (fecha_creacion)
);

-- Tabla de suscripciones (MODIFICADA para trabajar con códigos)
CREATE TABLE IF NOT EXISTS suscripciones (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    id_codigo_plan INT NULL,
    tipo_suscripcion ENUM('semanal', 'mensual') NOT NULL,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    estado ENUM('activa', 'vencida', 'cancelada', 'suspendida') DEFAULT 'activa',
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    activada_por INT,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (id_codigo_plan) REFERENCES codigos_planes(id) ON DELETE SET NULL,
    FOREIGN KEY (activada_por) REFERENCES usuarios(id) ON DELETE SET NULL,
    INDEX idx_usuario_estado (id_usuario, estado),
    INDEX idx_fecha_fin (fecha_fin),
    INDEX idx_codigo_plan (id_codigo_plan)
);

-- Tabla de medidas corporales (sin cambios)
CREATE TABLE medidas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    peso DECIMAL(5,2),
    altura DECIMAL(5,2),
    grasa_corporal DECIMAL(4,1),
    masa_muscular DECIMAL(5,2),
    cintura DECIMAL(5,2),
    cadera DECIMAL(5,2),
    pecho DECIMAL(5,2),
    brazo_derecho DECIMAL(5,2),
    brazo_izquierdo DECIMAL(5,2),
    pierna_derecha DECIMAL(5,2),
    pierna_izquierda DECIMAL(5,2),
    cuello DECIMAL(5,2),
    fecha_medicion DATE NOT NULL,
    notas TEXT,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    INDEX idx_usuario_fecha (id_usuario, fecha_medicion)
);

-- Tabla de rachas de asistencia (sin cambios)
CREATE TABLE rachas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    fecha DATE NOT NULL,
    activa BOOLEAN DEFAULT TRUE,
    tipo_actividad ENUM('gym', 'rutina_casa', 'cardio') DEFAULT 'gym',
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    UNIQUE KEY unique_user_date (id_usuario, fecha),
    INDEX idx_usuario_activa (id_usuario, activa)
);

-- Tabla de rutinas (sin cambios)
CREATE TABLE rutinas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_entrenador INT NOT NULL,
    titulo VARCHAR(200) NOT NULL,
    descripcion TEXT,
    categoria ENUM('principiante', 'intermedio', 'avanzado', 'cardio', 'fuerza', 'hiit') DEFAULT 'intermedio',
    objetivo ENUM('bajar_peso', 'subir_masa', 'mantener', 'definir', 'general') DEFAULT 'general',
    duracion_minutos INT DEFAULT 45,
    ejercicios JSON,
    activa BOOLEAN DEFAULT TRUE,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_entrenador) REFERENCES usuarios(id),
    INDEX idx_categoria_objetivo (categoria, objetivo)
);

-- Tabla de tips diarios (sin cambios)
CREATE TABLE tips (
    id INT AUTO_INCREMENT PRIMARY KEY,
    titulo VARCHAR(200) NOT NULL,
    contenido TEXT NOT NULL,
    categoria ENUM('nutricion', 'ejercicio', 'mentalidad', 'recovery', 'general') DEFAULT 'general',
    id_autor INT,
    activo BOOLEAN DEFAULT TRUE,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_autor) REFERENCES usuarios(id),
    INDEX idx_categoria_activo (categoria, activo)
);

-- Tabla de registro de comidas (sin cambios)
CREATE TABLE registro_comidas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    fecha DATE NOT NULL,
    comida ENUM('desayuno', 'almuerzo', 'cena', 'snack1', 'snack2') NOT NULL,
    alimento VARCHAR(200) NOT NULL,
    cantidad DECIMAL(6,2) NOT NULL,
    calorias DECIMAL(7,2) NOT NULL,
    proteinas DECIMAL(6,2) DEFAULT 0,
    carbohidratos DECIMAL(6,2) DEFAULT 0,
    grasas DECIMAL(6,2) DEFAULT 0,
    fibra DECIMAL(6,2) DEFAULT 0,
    api_food_id VARCHAR(100),
    api_nombre VARCHAR(20) DEFAULT 'manual',
    macros_json JSON,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    INDEX idx_usuario_fecha (id_usuario, fecha),
    INDEX idx_api_food (api_food_id, api_nombre)
);

-- Tabla de objetivos nutricionales (sin cambios)
CREATE TABLE objetivos_nutricionales (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    calorias_objetivo DECIMAL(7,2) NOT NULL,
    proteinas_objetivo DECIMAL(6,2) NOT NULL,
    carbohidratos_objetivo DECIMAL(6,2) NOT NULL,
    grasas_objetivo DECIMAL(6,2) NOT NULL,
    agua_objetivo DECIMAL(5,2) DEFAULT 2.5,
    fecha_inicio DATE NOT NULL,
    activo BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    INDEX idx_usuario_activo (id_usuario, activo)
);

-- Tabla de estadísticas (sin cambios)
CREATE TABLE estadisticas_gym (
    id INT AUTO_INCREMENT PRIMARY KEY,
    fecha DATE NOT NULL,
    total_asistencias INT DEFAULT 0,
    nuevos_registros INT DEFAULT 0,
    rutinas_completadas INT DEFAULT 0,
    codigos_generados INT DEFAULT 0,
    codigos_usados INT DEFAULT 0,
    UNIQUE KEY unique_fecha (fecha)
);

-- Tabla de alimentos favoritos (sin cambios)
CREATE TABLE alimentos_favoritos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    alimento VARCHAR(200) NOT NULL,
    api_food_id VARCHAR(100),
    api_nombre VARCHAR(20) DEFAULT 'manual',
    calorias_por_100g DECIMAL(7,2) NOT NULL,
    proteinas_por_100g DECIMAL(6,2) DEFAULT 0,
    carbohidratos_por_100g DECIMAL(6,2) DEFAULT 0,
    grasas_por_100g DECIMAL(6,2) DEFAULT 0,
    fibra_por_100g DECIMAL(6,2) DEFAULT 0,
    macros_json JSON,
    veces_usado INT DEFAULT 1,
    fecha_agregado TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_ultimo_uso TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    INDEX idx_usuario_uso (id_usuario, veces_usado DESC),
    INDEX idx_api_food (api_food_id, api_nombre)
);

-- Tabla de caché de API (sin cambios)
CREATE TABLE cache_api_alimentos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    termino_busqueda VARCHAR(200) NOT NULL,
    api_nombre VARCHAR(20) NOT NULL,
    resultados_json JSON NOT NULL,
    fecha_cache TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expira_en TIMESTAMP DEFAULT (CURRENT_TIMESTAMP + INTERVAL 7 DAY),
    UNIQUE KEY unique_busqueda_api (termino_busqueda, api_nombre),
    INDEX idx_expiracion (expira_en)
);

-- Tabla de rutinas asignadas (sin cambios)
CREATE TABLE IF NOT EXISTS usuario_rutinas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    id_rutina INT NOT NULL,
    fecha_asignacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    activa BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (id_rutina) REFERENCES rutinas(id) ON DELETE CASCADE,
    UNIQUE KEY unique_usuario_rutina (id_usuario, id_rutina)
);

-- Tabla de ejercicios preestablecidos (sin cambios)
CREATE TABLE IF NOT EXISTS ejercicios_preestablecidos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    grupo_muscular ENUM('pecho', 'espalda', 'piernas', 'brazos', 'hombros', 'core', 'cardio', 'fullbody') NOT NULL,
    series INT NOT NULL,
    repeticiones VARCHAR(50) NOT NULL,
    tiempo_descanso VARCHAR(20) NOT NULL,
    instrucciones TEXT,
    imagen_url VARCHAR(255),
    dificultad ENUM('principiante', 'intermedio', 'avanzado') DEFAULT 'intermedio',
    equipamiento_necesario VARCHAR(100),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    creado_por INT,
    FOREIGN KEY (creado_por) REFERENCES usuarios(id),
    INDEX idx_grupo_muscular (grupo_muscular),
    INDEX idx_dificultad (dificultad)
);

-- =============================================cod
-- VISTAS ACTUALIZADAS
-- =============================================

-- Vista para mostrar suscripciones con códigos
CREATE VIEW vista_suscripciones AS
SELECT 
    u.id,
    u.nombre,
    u.apellido,
    u.email,
    u.telefono,
    u.activo,
    u.fecha_registro,
    s.tipo_suscripcion,
    s.fecha_inicio,
    s.fecha_fin,
    s.estado,
    cp.codigo,
    cp.fecha_creacion as fecha_codigo_creado,
    cp.fecha_uso as fecha_codigo_usado,
    CASE 
        WHEN s.fecha_fin IS NULL THEN NULL
        WHEN s.fecha_fin < CURDATE() THEN 0
        ELSE DATEDIFF(s.fecha_fin, CURDATE())
    END as dias_restantes,
    CASE 
        WHEN s.fecha_fin IS NULL THEN 'Sin suscripción'
        WHEN s.fecha_fin < CURDATE() THEN 'Vencida'
        WHEN DATEDIFF(s.fecha_fin, CURDATE()) <= 3 THEN 'Por vencer'
        WHEN DATEDIFF(s.fecha_fin, CURDATE()) <= 7 THEN 'Próximo a vencer'
        ELSE 'Activa'
    END as estado_suscripcion_calculado
FROM usuarios u
LEFT JOIN suscripciones s ON u.id = s.id_usuario AND s.estado = 'activa'
LEFT JOIN codigos_planes cp ON s.id_codigo_plan = cp.id
WHERE u.tipo = 'cliente';

-- Vista de progreso de usuarios (actualizada)
CREATE VIEW vista_progreso_usuarios AS
SELECT 
    u.id,
    u.nombre,
    u.apellido,
    COUNT(DISTINCT r.fecha) as dias_asistencia,
    MAX(r.fecha) as ultima_asistencia,
    DATEDIFF(CURDATE(), MAX(r.fecha)) as dias_sin_ir,
    vs.estado_suscripcion_calculado,
    vs.dias_restantes,
    vs.tipo_suscripcion
FROM usuarios u
LEFT JOIN rachas r ON u.id = r.id_usuario AND r.activa = TRUE
LEFT JOIN vista_suscripciones vs ON u.id = vs.id
WHERE u.tipo = 'cliente'
GROUP BY u.id, u.nombre, u.apellido, vs.estado_suscripcion_calculado, vs.dias_restantes, vs.tipo_suscripcion;

-- Vista de códigos disponibles
CREATE VIEW vista_codigos_disponibles AS
SELECT 
    cp.id,
    cp.codigo,
    cp.tipo_plan,
    cp.usado,
    cp.fecha_creacion,
    cp.fecha_uso,
    cp.usado_por,
    cp.notas,
    u_creador.nombre as creado_por_nombre,
    u_usado.nombre as usado_por_nombre,
    CASE 
        WHEN cp.usado = FALSE THEN 'Disponible'
        ELSE 'Usado'
    END as estado_codigo
FROM codigos_planes cp
JOIN usuarios u_creador ON cp.creado_por = u_creador.id
LEFT JOIN usuarios u_usado ON cp.usado_por = u_usado.id
ORDER BY cp.fecha_creacion DESC;

-- Vista de estadísticas de códigos
CREATE VIEW vista_estadisticas_codigos AS
SELECT 
    cp.tipo_plan,
    COUNT(*) as total_generados,
    SUM(CASE WHEN cp.usado = TRUE THEN 1 ELSE 0 END) as total_usados,
    SUM(CASE WHEN cp.usado = FALSE THEN 1 ELSE 0 END) as total_disponibles,
    ROUND((SUM(CASE WHEN cp.usado = TRUE THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) as porcentaje_uso
FROM codigos_planes cp
GROUP BY cp.tipo_plan;

-- =============================================
-- FUNCIONES Y PROCEDIMIENTOS ALMACENADOS
-- =============================================

-- Función para generar código único
DELIMITER //
CREATE FUNCTION GenerarCodigoUnico(prefijo VARCHAR(5)) 
RETURNS VARCHAR(20)
READS SQL DATA
DETERMINISTIC
BEGIN
    DECLARE codigo_generado VARCHAR(20);
    DECLARE codigo_existe INT DEFAULT 1;
    DECLARE contador INT DEFAULT 0;
    
    WHILE codigo_existe > 0 AND contador < 100 DO
        SET codigo_generado = CONCAT(prefijo, '-', 
            SUBSTRING(MD5(RAND()), 1, 6));
        
        SELECT COUNT(*) INTO codigo_existe 
        FROM codigos_planes 
        WHERE codigo = codigo_generado;
        
        SET contador = contador + 1;
    END WHILE;
    
    RETURN UPPER(codigo_generado);
END//
DELIMITER ;

-- Procedimiento para generar código de plan
DELIMITER //
CREATE PROCEDURE GenerarCodigoPlan(
    IN p_tipo_plan ENUM('semanal', 'mensual'),
    IN p_creado_por INT,
    IN p_notas TEXT
)
BEGIN
    DECLARE v_codigo VARCHAR(20);
    DECLARE v_prefijo VARCHAR(5);
    
    -- Determinar prefijo según tipo de plan
    CASE p_tipo_plan
        WHEN 'semanal' THEN SET v_prefijo = 'SEM';
        WHEN 'mensual' THEN SET v_prefijo = 'MEN';
    END CASE;
    
    -- Generar código único
    SET v_codigo = GenerarCodigoUnico(v_prefijo);
    
    -- Insertar código en la base de datos
    INSERT INTO codigos_planes (
        codigo, tipo_plan, creado_por, notas
    ) VALUES (
        v_codigo, p_tipo_plan, p_creado_por, p_notas
    );
    
    -- Actualizar estadísticas
    INSERT INTO estadisticas_gym (fecha, codigos_generados) 
    VALUES (CURDATE(), 1)
    ON DUPLICATE KEY UPDATE 
        codigos_generados = codigos_generados + 1;
    
    -- Retornar el código generado
    SELECT v_codigo as codigo_generado;
END//
DELIMITER ;

-- Procedimiento para activar suscripción con código
DELIMITER //
CREATE PROCEDURE ActivarSuscripcionConCodigo(
    IN p_id_usuario INT,
    IN p_codigo VARCHAR(20),
    IN p_activada_por INT
)
BEGIN
    DECLARE v_id_codigo INT;
    DECLARE v_tipo_plan ENUM('semanal', 'mensual');
    DECLARE v_codigo_usado BOOLEAN DEFAULT FALSE;
    DECLARE v_fecha_inicio DATE;
    DECLARE v_fecha_fin DATE;
    DECLARE v_dias_agregar INT;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;
    
    START TRANSACTION;
    
    -- Verificar que el código existe y no está usado
    SELECT id, tipo_plan, usado 
    INTO v_id_codigo, v_tipo_plan, v_codigo_usado
    FROM codigos_planes 
    WHERE codigo = p_codigo;
    
    -- Validaciones
    IF v_id_codigo IS NULL THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'El código no existe';
    END IF;
    
    IF v_codigo_usado = TRUE THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'El código ya fue usado';
    END IF;
    
    -- Determinar días a agregar
    CASE v_tipo_plan
        WHEN 'semanal' THEN SET v_dias_agregar = 7;
        WHEN 'mensual' THEN SET v_dias_agregar = 30;
    END CASE;
    
    -- Determinar fecha de inicio (hoy o fecha de vencimiento si aún está activa)
    SELECT GREATEST(CURDATE(), IFNULL(MAX(fecha_fin), CURDATE()))
    INTO v_fecha_inicio
    FROM suscripciones 
    WHERE id_usuario = p_id_usuario AND estado = 'activa';
    
    SET v_fecha_fin = DATE_ADD(v_fecha_inicio, INTERVAL v_dias_agregar DAY);
    
    -- Marcar código como usado
    UPDATE codigos_planes SET 
        usado = TRUE,
        fecha_uso = NOW(),
        usado_por = p_id_usuario
    WHERE id = v_id_codigo;
    
    -- Crear nueva suscripción
    INSERT INTO suscripciones (
        id_usuario, id_codigo_plan, tipo_suscripcion,
        fecha_inicio, fecha_fin, estado, activada_por
    ) VALUES (
        p_id_usuario, v_id_codigo, v_tipo_plan,
        v_fecha_inicio, v_fecha_fin, 'activa', p_activada_por
    );
    
    -- Marcar suscripciones anteriores como vencidas
    UPDATE suscripciones SET estado = 'vencida'
    WHERE id_usuario = p_id_usuario AND estado = 'activa' AND id != LAST_INSERT_ID();
    
    -- Actualizar estadísticas
    INSERT INTO estadisticas_gym (fecha, codigos_usados) 
    VALUES (CURDATE(), 1)
    ON DUPLICATE KEY UPDATE 
        codigos_usados = codigos_usados + 1;
    
    COMMIT;
    
    -- Retornar información de la suscripción creada
    SELECT 
        'Suscripción activada exitosamente' as mensaje,
        v_tipo_plan as tipo_plan,
        v_fecha_inicio as fecha_inicio,
        v_fecha_fin as fecha_fin,
        v_dias_agregar as dias_agregados;
END//
DELIMITER ;

-- Procedimiento para actualizar estados de suscripciones vencidas
DELIMITER //
CREATE PROCEDURE ActualizarEstadosSuscripciones()
BEGIN
    UPDATE suscripciones SET 
        estado = 'vencida'
    WHERE fecha_fin < CURDATE() 
        AND estado = 'activa';
END//
DELIMITER ;

-- =============================================
-- DATOS INICIALES
-- =============================================

-- Insertar usuario admin por defecto
INSERT INTO usuarios (email, password, nombre, apellido, tipo) 
VALUES ('admin@gym.com', '$2y$10$ejemplo_hash_password', 'Admin', 'Gym', 'admin');

-- Insertar algunos tips de ejemplo
INSERT INTO tips (titulo, contenido, categoria) VALUES 
('Hidratación', 'Toma al menos 8 vasos de agua al día. Tu rendimiento mejora un 25% con buena hidratación.', 'general'),
('Proteína post-entreno', 'Consume proteína dentro de los 30 minutos después de entrenar para máxima recuperación.', 'nutricion'),
('Descanso entre series', 'Para fuerza: 2-3 min. Para hipertrofia: 1-2 min. Para resistencia: 30-60 seg.', 'ejercicio'),
('Mentalidad positiva', 'Cada día en el gym es una victoria. No importa qué tan pequeño sea el progreso.', 'mentalidad'),
('Importancia del sueño', 'Dormir 7-8 horas es crucial para la recuperación muscular y el rendimiento.', 'recovery');

-- Insertar algunos usuarios de prueba
INSERT INTO usuarios (email, password, nombre, apellido, tipo) VALUES 
('cliente1@gym.com', '$2y$10$ejemplo_hash', 'Juan', 'Pérez', 'cliente'),
('cliente2@gym.com', '$2y$10$ejemplo_hash', 'María', 'González', 'cliente'),
('entrenador1@gym.com', '$2y$10$ejemplo_hash', 'Luis', 'Martínez', 'entrenador');

-- Generar algunos códigos de ejemplo
CALL GenerarCodigoPlan('semanal', 1, 'Código de prueba semanal');
CALL GenerarCodigoPlan('mensual', 1, 'Código de prueba mensual');
CALL GenerarCodigoPlan('semanal', 1, 'Código de prueba semanal 2');

-- =============================================
-- ÍNDICES ADICIONALES PARA RENDIMIENTO
-- =============================================

-- Índices para mejorar consultas frecuentes
CREATE INDEX idx_suscripciones_usuario_activa ON suscripciones(id_usuario, estado, fecha_fin);
CREATE INDEX idx_codigos_tipo_usado ON codigos_planes(tipo_plan, usado, fecha_creacion);
CREATE INDEX idx_usuarios_tipo_activo ON usuarios(tipo, activo);

-- =============================================
-- EVENTOS AUTOMÁTICOS
-- =============================================

-- Evento para actualizar estados de suscripciones diariamente
CREATE EVENT IF NOT EXISTS actualizar_suscripciones_vencidas
ON SCHEDULE EVERY 1 DAY
STARTS CURRENT_TIMESTAMP
DO
CALL ActualizarEstadosSuscripciones();