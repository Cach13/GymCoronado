-- Base de datos para Gym App con Sistema de Suscripciones
CREATE DATABASE IF NOT EXISTS gym_app;
USE gym_app;

-- Tabla de usuarios simplificada
CREATE TABLE IF NOT EXISTS usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    telefono VARCHAR(20),
    tipo ENUM('cliente', 'entrenador', 'admin') DEFAULT 'cliente',
    activo BOOLEAN DEFAULT TRUE,
    puede_acceder BOOLEAN DEFAULT TRUE,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_nacimiento DATE,
    genero ENUM('masculino', 'femenino', 'otro'),
    objetivo ENUM('bajar_peso', 'subir_masa', 'mantener', 'definir') DEFAULT 'mantener',
    notas TEXT,
    INDEX idx_acceso (activo, puede_acceder)
);

-- Tabla de historial de acceso
CREATE TABLE IF NOT EXISTS historial_acceso (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    id_administrador INT NOT NULL,
    accion ENUM('activar', 'desactivar', 'bloquear_acceso', 'eliminar') NOT NULL,
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    detalles TEXT,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (id_administrador) REFERENCES usuarios(id)
);

-- Tabla de precios de suscripciones
CREATE TABLE precios_suscripciones (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tipo_suscripcion ENUM('semanal', 'mensual', 'trimestral', 'semestral', 'anual') NOT NULL,
    precio DECIMAL(10,2) NOT NULL,
    descuento_porcentaje DECIMAL(5,2) DEFAULT 0,
    activo BOOLEAN DEFAULT TRUE,
    fecha_inicio_vigencia DATE NOT NULL,
    fecha_fin_vigencia DATE,
    descripcion TEXT,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE KEY unique_tipo_vigencia (tipo_suscripcion, fecha_inicio_vigencia),
    INDEX idx_tipo_activo (tipo_suscripcion, activo)
);

-- Tabla de pagos (simplificada)
CREATE TABLE IF NOT EXISTS pagos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    monto DECIMAL(10,2) NOT NULL,
    modalidad_pago ENUM('efectivo', 'transferencia', 'tarjeta', 'otro') NOT NULL,
    fecha_pago DATE NOT NULL,
    referencia_pago VARCHAR(100),
    notas TEXT,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    registrado_por INT,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (registrado_por) REFERENCES usuarios(id) ON DELETE SET NULL,
    INDEX idx_usuario_fecha (id_usuario, fecha_pago),
    INDEX idx_modalidad_pago (modalidad_pago)
);

-- Tabla de suscripciones (nueva estructura)
CREATE TABLE IF NOT EXISTS suscripciones (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    id_pago INT,
    tipo_suscripcion ENUM('semanal', 'mensual', 'trimestral', 'semestral', 'anual') NOT NULL,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    estado ENUM('activa', 'vencida', 'cancelada', 'suspendida') DEFAULT 'activa',
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (id_pago) REFERENCES pagos(id) ON DELETE SET NULL,
    INDEX idx_usuario_estado (id_usuario, estado),
    INDEX idx_fecha_fin (fecha_fin)
);

-- Tabla de medidas corporales
CREATE TABLE medidas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    peso DECIMAL(5,2),
    altura DECIMAL(5,2),
    grasa_corporal DECIMAL(4,1),
    masa_muscular DECIMAL(5,2),
    cintura DECIMAL(5,2),
    cadera DECIMAL(5,2),
    pecho DECIMAL(5,2),
    brazo_derecho DECIMAL(5,2),
    brazo_izquierdo DECIMAL(5,2),
    pierna_derecha DECIMAL(5,2),
    pierna_izquierda DECIMAL(5,2),
    cuello DECIMAL(5,2),
    fecha_medicion DATE NOT NULL,
    notas TEXT,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    INDEX idx_usuario_fecha (id_usuario, fecha_medicion)
);

-- Tabla de rachas de asistencia
CREATE TABLE rachas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    fecha DATE NOT NULL,
    activa BOOLEAN DEFAULT TRUE,
    tipo_actividad ENUM('gym', 'rutina_casa', 'cardio') DEFAULT 'gym',
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    UNIQUE KEY unique_user_date (id_usuario, fecha),
    INDEX idx_usuario_activa (id_usuario, activa)
);

-- Tabla de rutinas
CREATE TABLE rutinas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_entrenador INT NOT NULL,
    titulo VARCHAR(200) NOT NULL,
    descripcion TEXT,
    categoria ENUM('principiante', 'intermedio', 'avanzado', 'cardio', 'fuerza', 'hiit') DEFAULT 'intermedio',
    objetivo ENUM('bajar_peso', 'subir_masa', 'mantener', 'definir', 'general') DEFAULT 'general',
    duracion_minutos INT DEFAULT 45,
    ejercicios JSON,
    activa BOOLEAN DEFAULT TRUE,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_entrenador) REFERENCES usuarios(id),
    INDEX idx_categoria_objetivo (categoria, objetivo)
);

-- Tabla de tips diarios
CREATE TABLE tips (
    id INT AUTO_INCREMENT PRIMARY KEY,
    titulo VARCHAR(200) NOT NULL,
    contenido TEXT NOT NULL,
    categoria ENUM('nutricion', 'ejercicio', 'mentalidad', 'recovery', 'general') DEFAULT 'general',
    id_autor INT,
    activo BOOLEAN DEFAULT TRUE,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_autor) REFERENCES usuarios(id),
    INDEX idx_categoria_activo (categoria, activo)
);

-- Tabla de registro de comidas
CREATE TABLE registro_comidas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    fecha DATE NOT NULL,
    comida ENUM('desayuno', 'almuerzo', 'cena', 'snack1', 'snack2') NOT NULL,
    alimento VARCHAR(200) NOT NULL,
    cantidad DECIMAL(6,2) NOT NULL,
    calorias DECIMAL(7,2) NOT NULL,
    proteinas DECIMAL(6,2) DEFAULT 0,
    carbohidratos DECIMAL(6,2) DEFAULT 0,
    grasas DECIMAL(6,2) DEFAULT 0,
    fibra DECIMAL(6,2) DEFAULT 0,
    api_food_id VARCHAR(100),
    api_nombre VARCHAR(20) DEFAULT 'manual',
    macros_json JSON,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    INDEX idx_usuario_fecha (id_usuario, fecha),
    INDEX idx_api_food (api_food_id, api_nombre)
);

-- Tabla de objetivos nutricionales
CREATE TABLE objetivos_nutricionales (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    calorias_objetivo DECIMAL(7,2) NOT NULL,
    proteinas_objetivo DECIMAL(6,2) NOT NULL,
    carbohidratos_objetivo DECIMAL(6,2) NOT NULL,
    grasas_objetivo DECIMAL(6,2) NOT NULL,
    agua_objetivo DECIMAL(5,2) DEFAULT 2.5,
    fecha_inicio DATE NOT NULL,
    activo BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    INDEX idx_usuario_activo (id_usuario, activo)
);

-- Tabla de promociones
CREATE TABLE promociones (
    id INT AUTO_INCREMENT PRIMARY KEY,
    titulo VARCHAR(200) NOT NULL,
    descripcion TEXT NOT NULL,
    descuento_porcentaje DECIMAL(5,2),
    descuento_cantidad DECIMAL(10,2),
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    activa BOOLEAN DEFAULT TRUE,
    codigo_promocional VARCHAR(50) UNIQUE,
    aplicable_a ENUM('todos', 'nuevos', 'renovaciones') DEFAULT 'todos',
    INDEX idx_fechas_activa (fecha_inicio, fecha_fin, activa)
);

-- Tabla de estadísticas
CREATE TABLE estadisticas_gym (
    id INT AUTO_INCREMENT PRIMARY KEY,
    fecha DATE NOT NULL,
    total_asistencias INT DEFAULT 0,
    nuevos_registros INT DEFAULT 0,
    rutinas_completadas INT DEFAULT 0,
    ingresos_dia DECIMAL(10,2) DEFAULT 0,
    UNIQUE KEY unique_fecha (fecha)
);

-- Tabla de alimentos favoritos
CREATE TABLE alimentos_favoritos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    alimento VARCHAR(200) NOT NULL,
    api_food_id VARCHAR(100),
    api_nombre VARCHAR(20) DEFAULT 'manual',
    calorias_por_100g DECIMAL(7,2) NOT NULL,
    proteinas_por_100g DECIMAL(6,2) DEFAULT 0,
    carbohidratos_por_100g DECIMAL(6,2) DEFAULT 0,
    grasas_por_100g DECIMAL(6,2) DEFAULT 0,
    fibra_por_100g DECIMAL(6,2) DEFAULT 0,
    macros_json JSON,
    veces_usado INT DEFAULT 1,
    fecha_agregado TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_ultimo_uso TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    INDEX idx_usuario_uso (id_usuario, veces_usado DESC),
    INDEX idx_api_food (api_food_id, api_nombre)
);

-- Tabla de caché de API
CREATE TABLE cache_api_alimentos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    termino_busqueda VARCHAR(200) NOT NULL,
    api_nombre VARCHAR(20) NOT NULL,
    resultados_json JSON NOT NULL,
    fecha_cache TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expira_en TIMESTAMP DEFAULT (CURRENT_TIMESTAMP + INTERVAL 7 DAY),
    UNIQUE KEY unique_busqueda_api (termino_busqueda, api_nombre),
    INDEX idx_expiracion (expira_en)
);

-- Tabla de rutinas asignadas
CREATE TABLE IF NOT EXISTS usuario_rutinas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    id_rutina INT NOT NULL,
    fecha_asignacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    activa BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (id_rutina) REFERENCES rutinas(id) ON DELETE CASCADE,
    UNIQUE KEY unique_usuario_rutina (id_usuario, id_rutina)
);

-- Tabla de ejercicios preestablecidos
CREATE TABLE IF NOT EXISTS ejercicios_preestablecidos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    grupo_muscular ENUM('pecho', 'espalda', 'piernas', 'brazos', 'hombros', 'core', 'cardio', 'fullbody') NOT NULL,
    series INT NOT NULL,
    repeticiones VARCHAR(50) NOT NULL,
    tiempo_descanso VARCHAR(20) NOT NULL,
    instrucciones TEXT,
    imagen_url VARCHAR(255),
    dificultad ENUM('principiante', 'intermedio', 'avanzado') DEFAULT 'intermedio',
    equipamiento_necesario VARCHAR(100),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    creado_por INT,
    FOREIGN KEY (creado_por) REFERENCES usuarios(id),
    INDEX idx_grupo_muscular (grupo_muscular),
    INDEX idx_dificultad (dificultad)
);
-- Verificar si la tabla existe y tiene las columnas necesarias
DESCRIBE rutinas;

-- Si necesitas crear la tabla:
CREATE TABLE IF NOT EXISTS rutinas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_entrenador INT NOT NULL,
    titulo VARCHAR(255) NOT NULL,
    descripcion TEXT,
    categoria VARCHAR(100) NOT NULL,
    objetivo VARCHAR(100) NOT NULL,
    duracion_minutos INT DEFAULT 60,
    ejercicios JSON,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_entrenador) REFERENCES usuarios(id)
);

-- =============================================
-- VISTAS ACTUALIZADAS
-- =============================================

-- Vista para calcular días restantes de suscripción (actualizada)
CREATE VIEW vista_suscripciones AS
SELECT 
    u.id,
    u.nombre,
    u.apellido,
    u.email,
    u.telefono,
    u.activo,
    u.fecha_registro,
    s.tipo_suscripcion,
    s.fecha_inicio,
    s.fecha_fin,
    s.estado,
    p.modalidad_pago,
    CASE 
        WHEN s.fecha_fin IS NULL THEN NULL
        WHEN s.fecha_fin < CURDATE() THEN 0
        ELSE DATEDIFF(s.fecha_fin, CURDATE())
    END as dias_restantes,
    CASE 
        WHEN s.fecha_fin IS NULL THEN 'Sin suscripción'
        WHEN s.fecha_fin < CURDATE() THEN 'Vencida'
        WHEN DATEDIFF(s.fecha_fin, CURDATE()) <= 7 THEN 'Por vencer'
        WHEN DATEDIFF(s.fecha_fin, CURDATE()) <= 15 THEN 'Próximo a vencer'
        ELSE 'Activa'
    END as estado_suscripcion_calculado,
    p.fecha_pago as ultimo_pago,
    p.monto as monto_ultimo_pago
FROM usuarios u
LEFT JOIN suscripciones s ON u.id = s.id_usuario AND s.estado = 'activa'
LEFT JOIN pagos p ON s.id_pago = p.id
WHERE u.tipo = 'cliente';

-- Vista de progreso de usuarios (actualizada)
CREATE VIEW vista_progreso_usuarios AS
SELECT 
    u.id,
    u.nombre,
    u.apellido,
    COUNT(DISTINCT r.fecha) as dias_asistencia,
    MAX(r.fecha) as ultima_asistencia,
    DATEDIFF(CURDATE(), MAX(r.fecha)) as dias_sin_ir,
    vs.estado_suscripcion_calculado,
    vs.dias_restantes
FROM usuarios u
LEFT JOIN rachas r ON u.id = r.id_usuario AND r.activa = TRUE
LEFT JOIN vista_suscripciones vs ON u.id = vs.id
WHERE u.tipo = 'cliente'
GROUP BY u.id, u.nombre, u.apellido, vs.estado_suscripcion_calculado, vs.dias_restantes;

-- Vista de estadísticas de pagos (actualizada)
CREATE VIEW vista_estadisticas_pagos AS
SELECT 
    DATE_FORMAT(p.fecha_pago, '%Y-%m') as mes,
    COUNT(*) as total_pagos,
    SUM(p.monto) as ingresos_totales,
    AVG(p.monto) as promedio_pago,
    p.modalidad_pago,
    s.tipo_suscripcion
FROM pagos p
JOIN suscripciones s ON p.id = s.id_pago
WHERE p.fecha_pago IS NOT NULL
GROUP BY DATE_FORMAT(p.fecha_pago, '%Y-%m'), p.modalidad_pago, s.tipo_suscripcion;



-- =============================================
-- PROCEDIMIENTOS ALMACENADOS ACTUALIZADOS
-- =============================================

-- Procedimiento para renovar suscripción (actualizado)
DELIMITER //
CREATE PROCEDURE RenovarSuscripcion(
    IN p_id_usuario INT,
    IN p_tipo_suscripcion ENUM('semanal', 'mensual', 'trimestral', 'semestral', 'anual'),
    IN p_modalidad_pago ENUM('efectivo', 'transferencia', 'tarjeta', 'otro'),
    IN p_monto DECIMAL(10,2),
    IN p_referencia_pago VARCHAR(100),
    IN p_registrado_por INT
)
BEGIN
    DECLARE v_fecha_inicio DATE;
    DECLARE v_fecha_fin DATE;
    DECLARE v_dias_agregar INT;
    DECLARE v_id_pago INT;
    
    -- Determinar días a agregar según tipo de suscripción
    CASE p_tipo_suscripcion
        WHEN 'semanal' THEN SET v_dias_agregar = 7;
        WHEN 'mensual' THEN SET v_dias_agregar = 30;
        WHEN 'trimestral' THEN SET v_dias_agregar = 90;
        WHEN 'semestral' THEN SET v_dias_agregar = 180;
        WHEN 'anual' THEN SET v_dias_agregar = 365;
    END CASE;
    
    -- Determinar fecha de inicio (hoy o fecha de vencimiento si aún está activa)
    SELECT GREATEST(CURDATE(), IFNULL(MAX(fecha_fin), CURDATE()))
    INTO v_fecha_inicio
    FROM suscripciones 
    WHERE id_usuario = p_id_usuario AND estado = 'activa';
    
    SET v_fecha_fin = DATE_ADD(v_fecha_inicio, INTERVAL v_dias_agregar DAY);
    
    -- Registrar pago primero
    INSERT INTO pagos (
        id_usuario, monto, modalidad_pago,
        fecha_pago, referencia_pago, registrado_por
    ) VALUES (
        p_id_usuario, p_monto, p_modalidad_pago,
        CURDATE(), p_referencia_pago, p_registrado_por
    );
    
    SET v_id_pago = LAST_INSERT_ID();
    
    -- Crear nueva suscripción
    INSERT INTO suscripciones (
        id_usuario, id_pago, tipo_suscripcion,
        fecha_inicio, fecha_fin, estado
    ) VALUES (
        p_id_usuario, v_id_pago, p_tipo_suscripcion,
        v_fecha_inicio, v_fecha_fin, 'activa'
    );
    
    -- Marcar suscripciones anteriores como vencidas
    UPDATE suscripciones SET estado = 'vencida'
    WHERE id_usuario = p_id_usuario AND estado = 'activa' AND id != LAST_INSERT_ID();
END//
DELIMITER ;

-- Procedimiento para actualizar estados de suscripciones vencidas (actualizado)
DELIMITER //
CREATE PROCEDURE ActualizarEstadosSuscripciones()
BEGIN
    UPDATE suscripciones SET 
        estado = 'vencida'
    WHERE fecha_fin < CURDATE() 
        AND estado = 'activa';
END//
DELIMITER ;

-- =============================================
-- DATOS INICIALES ACTUALIZADOS
-- =============================================

-- Insertar precios de suscripciones
INSERT INTO precios_suscripciones (tipo_suscripcion, precio, fecha_inicio_vigencia, descripcion) VALUES 
('semanal', 150.00, '2024-01-01', 'Suscripción semanal - Acceso completo al gimnasio'),
('mensual', 500.00, '2024-01-01', 'Suscripción mensual - Acceso completo + 1 clase grupal'),
('trimestral', 1350.00, '2024-01-01', 'Suscripción trimestral - 10% descuento + 2 clases grupales'),
('semestral', 2400.00, '2024-01-01', 'Suscripción semestral - 20% descuento + clases grupales ilimitadas'),
('anual', 4200.00, '2024-01-01', 'Suscripción anual - 30% descuento + entrenador personal');

-- Insertar usuario admin por defecto
INSERT INTO usuarios (email, password, nombre, apellido, tipo) 
VALUES ('admin@gym.com', '$2y$10$ejemplo_hash_password', 'Admin', 'Gym', 'admin');

-- Insertar algunos tips de ejemplo
INSERT INTO tips (titulo, contenido, categoria) VALUES 
('Hidratación', 'Toma al menos 8 vasos de agua al día. Tu rendimiento mejora un 25% con buena hidratación.', 'general'),
('Proteína post-entreno', 'Consume proteína dentro de los 30 minutos después de entrenar para máxima recuperación.', 'nutricion'),
('Descanso entre series', 'Para fuerza: 2-3 min. Para hipertrofia: 1-2 min. Para resistencia: 30-60 seg.', 'ejercicio'),
('Mentalidad positiva', 'Cada día en el gym es una victoria. No importa qué tan pequeño sea el progreso.', 'mentalidad'),
('Importancia del sueño', 'Dormir 7-8 horas es crucial para la recuperación muscular y el rendimiento.', 'recovery');

-- Insertar algunos usuarios de prueba
INSERT INTO usuarios (email, password, nombre, apellido, tipo) VALUES 
('cliente1@gym.com', '$2y$10$ejemplo_hash', 'Juan', 'Pérez', 'cliente'),
('cliente2@gym.com', '$2y$10$ejemplo_hash', 'María', 'González', 'cliente'),
('entrenador1@gym.com', '$2y$10$ejemplo_hash', 'Luis', 'Martínez', 'entrenador');

-- Insertar pagos y suscripciones de prueba
CALL RenovarSuscripcion(2, 'mensual', 'efectivo', 500.00, 'REC-001', 1);
CALL RenovarSuscripcion(3, 'trimestral', 'transferencia', 1350.00, 'TRANS-001', 1);